

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace FootballManagerApp.Models
{

using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;

using System.Data.Entity.Core.Objects;
using System.Linq;


public partial class FootballManagerDBEntities : DbContext
{
    public FootballManagerDBEntities()
        : base("name=FootballManagerDBEntities")
    {

    }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        throw new UnintentionalCodeFirstException();
    }


    public virtual DbSet<Association> Associations { get; set; }

    public virtual DbSet<Coach> Coaches { get; set; }

    public virtual DbSet<Coach_Degree> Coach_Degree { get; set; }

    public virtual DbSet<Coach_Direction> Coach_Direction { get; set; }

    public virtual DbSet<Coach_Email> Coach_Email { get; set; }

    public virtual DbSet<Coach_Phone> Coach_Phone { get; set; }

    public virtual DbSet<Coach_Team> Coach_Team { get; set; }

    public virtual DbSet<Competition> Competitions { get; set; }

    public virtual DbSet<Competition_Type> Competition_Type { get; set; }

    public virtual DbSet<Country> Countries { get; set; }

    public virtual DbSet<Degree> Degrees { get; set; }

    public virtual DbSet<Goal> Goals { get; set; }

    public virtual DbSet<goalType> goalTypes { get; set; }

    public virtual DbSet<LineUp> LineUps { get; set; }

    public virtual DbSet<Match> Matches { get; set; }

    public virtual DbSet<Match_Referee> Match_Referee { get; set; }

    public virtual DbSet<Matchday> Matchdays { get; set; }

    public virtual DbSet<Member> Members { get; set; }

    public virtual DbSet<Player> Players { get; set; }

    public virtual DbSet<Player_Direction> Player_Direction { get; set; }

    public virtual DbSet<Player_Email> Player_Email { get; set; }

    public virtual DbSet<Player_Team> Player_Team { get; set; }

    public virtual DbSet<PlayerPosition> PlayerPositions { get; set; }

    public virtual DbSet<Position> Positions { get; set; }

    public virtual DbSet<PossiblePosition> PossiblePositions { get; set; }

    public virtual DbSet<Referee> Referees { get; set; }

    public virtual DbSet<Season> Seasons { get; set; }

    public virtual DbSet<sysdiagram> sysdiagrams { get; set; }

    public virtual DbSet<Team> Teams { get; set; }


    public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        var versionParameter = version.HasValue ?
            new ObjectParameter("version", version) :
            new ObjectParameter("version", typeof(int));


        var definitionParameter = definition != null ?
            new ObjectParameter("definition", definition) :
            new ObjectParameter("definition", typeof(byte[]));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
    }


    public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        var versionParameter = version.HasValue ?
            new ObjectParameter("version", version) :
            new ObjectParameter("version", typeof(int));


        var definitionParameter = definition != null ?
            new ObjectParameter("definition", definition) :
            new ObjectParameter("definition", typeof(byte[]));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
    }


    public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
    }


    public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
    }


    public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
    }


    public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
    {

        var diagramnameParameter = diagramname != null ?
            new ObjectParameter("diagramname", diagramname) :
            new ObjectParameter("diagramname", typeof(string));


        var owner_idParameter = owner_id.HasValue ?
            new ObjectParameter("owner_id", owner_id) :
            new ObjectParameter("owner_id", typeof(int));


        var new_diagramnameParameter = new_diagramname != null ?
            new ObjectParameter("new_diagramname", new_diagramname) :
            new ObjectParameter("new_diagramname", typeof(string));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
    }


    public virtual int sp_upgraddiagrams()
    {

        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
    }


    public virtual ObjectResult<AddNewThing_Result> AddNewThing(Nullable<decimal> iD)
    {

        var iDParameter = iD.HasValue ?
            new ObjectParameter("ID", iD) :
            new ObjectParameter("ID", typeof(decimal));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AddNewThing_Result>("AddNewThing", iDParameter);
    }


    public virtual int AddTest(Nullable<decimal> id_Test)
    {

        var id_TestParameter = id_Test.HasValue ?
            new ObjectParameter("id_Test", id_Test) :
            new ObjectParameter("id_Test", typeof(decimal));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddTest", id_TestParameter);
    }


    public virtual int AddNewTest(Nullable<int> param1)
    {

        var param1Parameter = param1.HasValue ?
            new ObjectParameter("param1", param1) :
            new ObjectParameter("param1", typeof(int));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewTest", param1Parameter);
    }


    public virtual ObjectResult<Referees_Competition_Result> Referees_Competition(Nullable<decimal> competition, Nullable<decimal> year)
    {

        var competitionParameter = competition.HasValue ?
            new ObjectParameter("competition", competition) :
            new ObjectParameter("competition", typeof(decimal));


        var yearParameter = year.HasValue ?
            new ObjectParameter("year", year) :
            new ObjectParameter("year", typeof(decimal));


        return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Referees_Competition_Result>("Referees_Competition", competitionParameter, yearParameter);
    }

}

}

